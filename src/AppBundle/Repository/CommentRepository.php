<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CommentRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    public function findLastComments($number = 5)
    {
        return $this->createQueryBuilder('c')
            ->select('c, p')
            ->join('c.post', 'p')
            //->join('p.author', 'a')
            //->leftJoin('p.tags', 't')
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults($number)
            ->getResult();
    }

    public function findCommentsByPost($slug)
    {
        return $this->createQueryBuilder('c')
            ->select('c, p')
            ->join('c.post', 'p')
            ->where('p.slug =:slug')
            ->setParameter('slug', $slug)
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findAllSorted()
    {
        return $this->createQueryBuilder('c')
            ->select('c, p')
            ->join('c.post', 'p')
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->getResult();

    }

    public function countAllComments()
    {
        return $this->createQueryBuilder('c')
            ->select('count(c.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findAllCommentsWithDependencies($currentPage, $limit)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c, p, u')
            ->join('c.user', 'u')
            ->leftJoin('c.post', 'p')
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setFirstResult($limit * ($currentPage -1))
            ->setMaxResults($limit);

        return new Paginator($query);

    }

    public function findAllCommentsByUserAndUserPosts($currentPage, $limit, User $user)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c, p, u')
            ->join('c.user', 'u')
            ->leftJoin('c.post', 'p')
            ->join('p.author', 'a')
            ->where('u.slug =:slug')
            ->orWhere('a.slug =:slug')
            ->setParameter('slug', $user->getSlug())
            //->addGroupBy('u')
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setFirstResult($limit * ($currentPage -1))
            ->setMaxResults($limit);

        return new Paginator($query);
    }

    public function findAllCommentsByUserInAdminPosts($currentPage, $limit, $user, $admin)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c, p, u')
            ->join('c.user', 'u')
            ->leftJoin('c.post', 'p')
            ->join('p.author', 'a')
            ->where('u.slug =:slug')
            ->andWhere('a.slug =:adminslug')
            ->setParameter('slug', $user->getSlug())
            ->setParameter('adminslug', $admin->getSlug())
            //->addGroupBy('u')
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setFirstResult($limit * ($currentPage -1))
            ->setMaxResults($limit);

        return new Paginator($query);
    }
}
